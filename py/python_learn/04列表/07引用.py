# 4.7 引用
#变量赋值：
spam = 42
cheese = spam
spam = 100
#内存中有一个42的整型数据，使用spam变量指向该变量；然后将spam赋值给变量cheese，实际就是让cheese变量指向变量spam指向的数据42；然后变量spam被赋值另一个数据：100，spam指向100；

#列表的应用：
#将列表赋值给一个变量，变量不是直接指向该列表，而是指向该列表的引用，用具像的解析可以把引用比喻成一串id
#但创建一个列表时，是把列表的引用赋值给变量，所以把变量赋值给另一个变量，另一个变量也只指向该变量的引用。变量指向同一个列表引用，如果你修改列表，打印两个变量，列表值都是被修改过的
maps = [1,2,3,4]
eseehc = maps
eseehc[1] = 'hello'

#变量保存可变数据类型的值时，变量指向数据的引用；变量保存不可变的数据类型的值，变量就保存值本身

#=============================================================================================

#4.7.1 传递引用
#当函数被调用时，参数的值会被复制给变元。对于列表，这意味这变元得到的时引用的拷贝。
def eg(someParameter):
    someParameter.append('hello')
spm = [1,2,3]
eg(spm)
print(spm)
# eg被调用时，没有使用返回值重新给spm赋值，而是直接修改spam列表；

#copy模块的copy()和deepcopy()函数
#copy():用来赋值list或dict这样的可变值序列，而不只是复制引用
import copy
ak47 = ['a','k', 4, 7]
ak = copy.copy(ak47)
ak[1] = 'b'
print(ak47)
print(ak)
#copy之后两个变量指向不是同一个引用

#deepcopy()：如果复制的列表中还包含了其它列表，那就使用deepcopy同时复制它们内部的列表

