#4.1
#列表定义：列表是一个值，它包含多个字结构的序列。它作为一个值保存在变量中，或传递给函数
#列表组成：起始：[ 、表项.... 、结束：]
#列表值，就是列表作为一个值赋予给一个变量；[]这是一个空列表；列表项可以是其它列表
L = ['A', 'B', 'C']
print(L)

#4.2
#下标：在其它语言也被称为索引;下标只能为整数
spam = [1, 2, 3, 4]
print(spam[1])
#当列表项为列表时，可以通过多个下标组合来找到你想要的元素
spams = [[1, 2, 3],[4, 5, 6]]
print(spams[1][2])

#4.3
#负数下标：-1代表最后一个下标，-2代表倒数第二个元素的下标，以此类推，反向查找；
rose = ['r', 'o', 's', 'e']
print(rose[-1])

#4.4利用切片取得子列表
#利用下标可以一次从列表中取单个值；利用切片可以一次从列表中取多个值，结果时一个列表
#切片的格式：LIST[index : index]，在列表中取从开始下标的元素(包括开始下标元素)到结束下标的元素(不包括结束下标)
#切片的快捷方法：可以省略 冒号 两边的一个下标或两个下标；省略开始下标相当于用0作为开始下标；省略第结束下标相当于结束下标为最后一个元素的下标

#4.5用len()获取列表的长度
#len()函数能发回传递个len()函数的列表中的值的个数，就像计算字符串中字符的个数

#4.6使用下标改变列表中的值
rep = ['one', 'two', 'three', 'four']
rep[0] = 1
print(rep)

# 4.7 列表连接和列表赋值
#列表连接：使用 + 可以把两个列表连接起来获得一个新的列表，就像拼接字符串一样
connect_list = ['c', 'o', 'n', 'n'] + ['e', 'c', 't']
connect_str = 's' + 't' + 'r'
print(connect_list,connect_str)
#列表赋值：使用 * 和一个整数，实现列表的复制.整数决定复制列表多少次，然后把复制出来的列表的值，放到一个新列表中
copy_list  = ['c', 'o', 'p', 'y'] *3
print(copy_list)

# 4.8用del语句从列表中删除值
#del语句：删除列中下标处的值，列表中被删除值后面的所有值，都向左移动一个下标
del_list = ['visvim', 'vintage republic', 'vans']
del del_list[1]
print(del_list[1])

